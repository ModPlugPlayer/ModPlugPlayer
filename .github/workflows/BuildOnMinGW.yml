name: Build on MinGW

on:
  workflow_run:
    workflows: ["Create Release"]
    types:
      - completed
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2022

    strategy:
      matrix:
        include:
          - { prettyName: MinGW64, sys: mingw64, env: x86_64 }
          - { prettyName: UCRT64, sys: ucrt64,  env: ucrt-x86_64 }  # Experimental!
          - { prettyName: CLANG64, sys: clang64, env: clang-x86_64 } # Experimental!
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Clone git repository ${{ github.event.workflow_run.head_branch }}
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
          submodules: true
      - name: Setup MSYS2 Environment
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{matrix.sys}}
          install: base-devel
            msys2-runtime
            p7zip
            mingw-w64-${{matrix.env}}-toolchain
            mingw-w64-${{matrix.env}}-qt6
            mingw-w64-${{matrix.env}}-cmake
            mingw-w64-${{matrix.env}}-ninja
            mingw-w64-${{matrix.env}}-portaudio
            mingw-w64-${{matrix.env}}-libopenmpt
            mingw-w64-${{matrix.env}}-fftw

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ./build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ./build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

      - name: Deploy
        run: |
            if command -v g++ > /dev/null
            then
              g++ ./DeploymentScripts/DeployOnMSYS2.cpp -o deploy.exe --std=c++20
            else
              clang++ ./DeploymentScripts/DeployOnMSYS2.cpp -o deploy.exe --std=c++20
            fi
            mkdir ModPlugPlayer
            cp ./build/ModPlug\ Player.exe ModPlugPlayer/
            ./deploy.exe "./ModPlugPlayer/ModPlug Player.exe" ./ModPlugPlayer/
            windeployqt-qt6.exe ./ModPlugPlayer/ModPlug\ Player.exe
            7z a -r ModPlugPlayer-Windows-${{matrix.prettyName}}.7z ./ModPlugPlayer

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./ModPlugPlayer-Windows-${{matrix.prettyName}}.7z
            #LICENSE
          tag_name: ${{ github.event.workflow_run.head_branch }}

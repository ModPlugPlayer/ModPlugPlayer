#Build script of ModPlug Player
#Copyright (C) 2020 Volkan Orhan

#This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

#This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

#You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.

cmake_minimum_required(VERSION 3.5)

project(ModPlugPlayer VERSION 0.1 LANGUAGES CXX)

set(OutputName "ModPlug Player")

if(APPLE)
    enable_language(OBJCXX)
endif()

enable_language(C)

set(CMAKE_INCLUDE_CURRENT_DIR OFF)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

#Boost Definitions
set(Boost_USE_STATIC_LIBS OFF)
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME OFF)

if(APPLE)
    set(OpenMPT_USE_STATIC_LIBS false)
    set(FFTW_USE_STATIC_LIBS true)
    #set(BOOST_USE_STATIC_LIBS true)
    #set(FFTW_USE_STATIC_LIBS true)
    set(PortAudio_USE_STATIC_LIBS true)
    set(PortAudioCPP_USE_STATIC_LIBS true)
endif(APPLE)

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMakeModules)

find_package(QT NAMES Qt6 COMPONENTS Widgets REQUIRED)
find_package(QT NAMES Qt6 COMPONENTS Core REQUIRED)
find_package(QT NAMES Qt6 COMPONENTS Gui REQUIRED)
find_package(QT NAMES Qt6 COMPONENTS Svg REQUIRED)
find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Widgets REQUIRED)
find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core REQUIRED)
find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Gui REQUIRED)
find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Svg REQUIRED)
find_package(Boost REQUIRED)
find_package(FFTW REQUIRED)
find_package(PortAudio REQUIRED)
find_package(PortAudioCPP REQUIRED)
find_package(OpenMPT REQUIRED)

if(QT_VERSION LESS 6.2)
     message(FATAL_ERROR "ModPlug Player requires Qt 6.2 or above to be compiled.")
endif()

#App Icon Definitions
if(WIN32)
    set(AppIconResourceForWindows "${CMAKE_CURRENT_SOURCE_DIR}/MPP.rc")
elseif(APPLE)
    # The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
    # generated by CMake. This variable contains the .icns file name,
    # without the path.
    set(MACOSX_BUNDLE_ICON_FILE MPP.icns)

    # And the following tells CMake where to find and install the file itself.
    set(AppIconForMacos "${CMAKE_CURRENT_SOURCE_DIR}/MPP.icns")
    set_source_files_properties(${AppIconForMacos} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")
endif()

include_directories(src)
include_directories(src/Util)
include_directories(Components/Common/src)
include_directories(Components/DSP/src)
include_directories(Components/LCDDisplayWidget/src)
include_directories(Components/SpectrumAnalyzerAnimator/src)
include_directories(Components/SpectrumAnalyzer/src)
include_directories(Components/GradientEditor/src)
include_directories(Components/PlayListWidget/src)
include_directories(Components/ModPlugPlayerAPI/src)
include_directories(${Boost_INCLUDE_DIRS})
include_directories(${FFTW_INCLUDES})
include_directories(${PORTAUDIO_INCLUDE_DIRS})
include_directories(${PORTAUDIOCPP_INCLUDE_DIRS})
include_directories(${OPENMPT_INCLUDE_DIRS})

if(APPLE)
    include_directories(src/OsSpecific/macOS)
    file(GLOB ModPlugPlayerObjCppSrc
        "src/OsSpecific/macOS/*.mm"
        "src/OsSpecific/macOS/*.h"
    )

    SET_SOURCE_FILES_PROPERTIES(
        "src/OsSpecific/macOS/MacManager.mm"
        PROPERTIES LANGUAGE OBJCXX
    )
endif()

file(GLOB ModPlugPlayerSrc
    "./src/*.cpp"
    "./src/*.hpp"
    "./ui/*.ui"
    "./ui/*.qrc"
    "./src/Util/*.cpp"
    "./src/Util/*.hpp"
    "./src/Implementation/*.cpp"
    "./src/Implementation/*.hpp"
)

file(GLOB KissFFTSrc
    "Components/KissFFT/*.c"
    "Components/KissFFT/*.h"
)

file(GLOB CommonSrc
    "Components/Common/src/*.cpp"
    "Components/Common/src/*.hpp"
    "Components/Common/src/Util/*.cpp"
    "Components/Common/src/Util/*.hpp"
    "Components/Common/ui/*.ui"
    "Components/Common/ui/*.qrc"
)

file(GLOB SpectrumAnalyzerSrc
    "Components/SpectrumAnalyzer/src/*.cpp"
    "Components/SpectrumAnalyzer/src/*.hpp"
)

file(GLOB ModPlugPlayerAPISrc
    "Components/ModPlugPlayerAPI/src/*.cpp"
    "Components/ModPlugPlayerAPI/src/*.hpp"
    "Components/ModPlugPlayerAPI/src/Interfaces/*.hpp"
)

file(GLOB DspSrc
    "Components/DSP/src/*.cpp"
    "Components/DSP/src/*.hpp"
)

file(GLOB LcdDisplaySrc
    "Components/LCDDisplayWidget/src/*.cpp"
    "Components/LCDDisplayWidget/src/*.hpp"
    "Components/LCDDisplayWidget/src/*.ui"
)

file(GLOB SpectrumAnalyzerAnimatorSrc
    "Components/SpectrumAnalyzerAnimator/src/*.cpp"
    "Components/SpectrumAnalyzerAnimator/src/*.hpp"
)

file(GLOB GradientEditorSrc
    "Components/GradientEditor/src/*.cpp"
    "Components/GradientEditor/src/*.hpp"
)

file(GLOB PlayListWidgetSrc
    "Components/PlayListWidget/src/*.cpp"
    "Components/PlayListWidget/src/*.hpp"
    "Components/PlayListWidget/src/*.ui"
)

set(CMAKE_AUTOUIC_SEARCH_PATHS
    "src"
    "ui"
    "Components/ModPlugPlayerAPI/src"
    "Components/Common/src"
    "Components/SpectrumAnalyzer/src"
    "Components/SpectrumAnalyzerAnimator/src"
    "Components/DSP/src"
    "Components/LCDDisplayWidget/src"
    "Components/GradientEditor/src"
    "Components/PlayListWidget/src"
    "src/OsSpecific/macOS"
)

if(APPLE)
    qt_add_executable(ModPlugPlayer
        MANUAL_FINALIZATION
        MACOSX_BUNDLE
        ${ModPlugPlayerSrc}
        ${CommonSrc}
        ${ModPlugPlayerAPISrc}
        ${ModPlugPlayerObjCppSrc}
        ${SpectrumAnalyzerSrc}
        ${DspSrc}
        ${LcdDisplaySrc}
        ${SpectrumAnalyzerAnimatorSrc}
        ${GradientEditorSrc}
        ${PlayListWidgetSrc}
        ${AppIconForMacos}
        ${KissFFTSrc}
    )
    target_link_libraries(ModPlugPlayer PRIVATE
        Qt${QT_VERSION_MAJOR}::Widgets
        Qt${QT_VERSION_MAJOR}::Core
        Qt${QT_VERSION_MAJOR}::Gui
        Qt${QT_VERSION_MAJOR}::Svg
        ${Boost_LIBRARIES}
        ${FFTW_LIBRARIES}
        ${PORTAUDIO_LIBRARIES}
        ${PORTAUDIOCPP_LIBRARIES}
        ${OPENMPT_LIBRARIES}
     )
    set_target_properties(ModPlugPlayer PROPERTIES
        MACOSX_BUNDLE_GUI_IDENTIFIER www.modplugplayer.org
        MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
        MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
        OUTPUT_NAME ${OutputName}
     )
elseif(UNIX)
    qt_add_executable(ModPlugPlayer
        MANUAL_FINALIZATION
        ${ModPlugPlayerSrc}
        ${CommonSrc}
        ${ModPlugPlayerAPISrc}
        ${SpectrumAnalyzerSrc}
        ${DspSrc}
        ${LcdDisplaySrc}
        ${SpectrumAnalyzerAnimatorSrc}
        ${GradientEditorSrc}
        ${PlayListWidgetSrc}
        ${KissFFTSrc}
    )
    target_link_libraries(ModPlugPlayer PRIVATE
        Qt${QT_VERSION_MAJOR}::Widgets
        Qt${QT_VERSION_MAJOR}::Core
        Qt${QT_VERSION_MAJOR}::Gui
        Qt${QT_VERSION_MAJOR}::Svg
        ${Boost_LIBRARIES}
        ${FFTW_LIBRARIES}
        ${PORTAUDIO_LIBRARIES}
        ${PORTAUDIOCPP_LIBRARIES}
        ${OPENMPT_LIBRARIES}
    )
    set_target_properties(ModPlugPlayer PROPERTIES
        OUTPUT_NAME ${OutputName}
    )
elseif(WIN32)
    qt_add_executable(ModPlugPlayer
        MANUAL_FINALIZATION
        WIN32
        ${ModPlugPlayerSrc}
        ${CommonSrc}
        ${ModPlugPlayerAPISrc}
        ${ModPlugPlayerObjCppSrc}
        ${SpectrumAnalyzerSrc}
        ${DspSrc}
        ${LcdDisplaySrc}
        ${SpectrumAnalyzerAnimatorSrc}
        ${GradientEditorSrc}
        ${PlayListWidgetSrc}
        ${AppIconResourceForWindows}
        ${KissFFTSrc}
    )
    target_link_libraries(ModPlugPlayer PRIVATE
        Qt${QT_VERSION_MAJOR}::Widgets
        Qt${QT_VERSION_MAJOR}::Core
        Qt${QT_VERSION_MAJOR}::Gui
        Qt${QT_VERSION_MAJOR}::Svg
        ${Boost_LIBRARIES}
        ${FFTW_LIBRARIES}
        ${PORTAUDIO_LIBRARIES}
        ${PORTAUDIOCPP_LIBRARIES}
        ${OPENMPT_LIBRARIES}
    )
    set_target_properties(ModPlugPlayer PROPERTIES
        OUTPUT_NAME ${OutputName}
    )
endif()

qt_finalize_executable(ModPlugPlayer)
